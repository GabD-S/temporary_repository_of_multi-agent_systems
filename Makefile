# Makefile para Simula√ß√£o Multi-Agente de Armazenamento em Nuvem
# Executa todos os testes, coleta resultados e gera relat√≥rios completos

# Configura√ß√µes
PYTHON = python3
VENV_DIR = .venv
RESULTS_DIR = results
TIMESTAMP = $(shell date +%Y%m%d_%H%M%S)
REPORT_DIR = $(RESULTS_DIR)/report_$(TIMESTAMP)

# Scripts de simula√ß√£o
SIMULATIONS = enhanced_cloud_storage.py demo.py balanced_test.py cloud_storage_spade.py

# Arquivos de resultado
RESULT_FILES = $(RESULTS_DIR)/enhanced_results.json \
               $(RESULTS_DIR)/demo_results.json \
               $(RESULTS_DIR)/balanced_results.json \
               $(RESULTS_DIR)/spade_results.json

# Arquivos de gr√°ficos
GRAPH_FILES = $(RESULTS_DIR)/performance_graphs.png \
              $(RESULTS_DIR)/comparison_graphs.png \
              $(RESULTS_DIR)/statistical_analysis.png

.PHONY: all setup install run-all run-enhanced run-demo run-balanced run-spade \
        collect-results generate-graphs create-report clean help

# Target principal - executa tudo
all: setup install run-all collect-results generate-graphs create-report
	@echo "üéâ Simula√ß√£o completa finalizada!"
	@echo "üìÅ Resultados dispon√≠veis em: $(REPORT_DIR)"
	@echo "üìÑ Relat√≥rio LaTeX: $(REPORT_DIR)/simulation_report.tex"
	@echo "üìä Gr√°ficos: $(RESULTS_DIR)/"

# Configura√ß√£o do ambiente
setup:
	@echo "üîß Configurando ambiente..."
	@mkdir -p $(RESULTS_DIR)
	@mkdir -p $(REPORT_DIR)
	@if [ ! -d "$(VENV_DIR)" ]; then \
		echo "üì¶ Criando ambiente virtual..."; \
		$(PYTHON) -m venv $(VENV_DIR); \
	fi

# Instala√ß√£o de depend√™ncias
install: setup
	@echo "üì• Instalando depend√™ncias..."
	@$(VENV_DIR)/bin/pip install --upgrade pip
	@$(VENV_DIR)/bin/pip install -r requirements.txt
	@$(VENV_DIR)/bin/pip install matplotlib seaborn pandas numpy scipy
	@$(VENV_DIR)/bin/pip install jinja2 # Para gera√ß√£o de relat√≥rios

# Executa todas as simula√ß√µes
run-all: run-enhanced run-demo run-balanced run-spade
	@echo "‚úÖ Todas as simula√ß√µes conclu√≠das!"

# Simula√ß√£o enhanced (principal)
run-enhanced:
	@echo "üöÄ Executando simula√ß√£o enhanced..."
	@$(VENV_DIR)/bin/python enhanced_cloud_storage.py > $(RESULTS_DIR)/enhanced_output.log 2>&1
	@echo "‚úÖ Simula√ß√£o enhanced conclu√≠da"

# Simula√ß√£o demo
run-demo:
	@echo "üé¨ Executando demo..."
	@$(VENV_DIR)/bin/python demo.py > $(RESULTS_DIR)/demo_output.log 2>&1
	@echo "‚úÖ Demo conclu√≠do"

# Teste balanceado
run-balanced:
	@echo "‚öñÔ∏è Executando teste balanceado..."
	@$(VENV_DIR)/bin/python balanced_test.py > $(RESULTS_DIR)/balanced_output.log 2>&1
	@echo "‚úÖ Teste balanceado conclu√≠do"

# Simula√ß√£o SPADE (pode falhar se n√£o tiver XMPP)
run-spade:
	@echo "üåê Tentando executar simula√ß√£o SPADE..."
	@timeout 60 $(VENV_DIR)/bin/python cloud_storage_spade.py > $(RESULTS_DIR)/spade_output.log 2>&1 || \
		echo "‚ö†Ô∏è Simula√ß√£o SPADE n√£o conclu√≠da (normal se n√£o houver servidor XMPP)"

# Coleta e processa resultados
collect-results:
	@echo "üìä Coletando resultados..."
	@$(VENV_DIR)/bin/python scripts/collect_results.py

# Gera gr√°ficos
generate-graphs: collect-results
	@echo "üìà Gerando gr√°ficos..."
	@$(VENV_DIR)/bin/python scripts/generate_graphs.py

# Cria relat√≥rio final em LaTeX
create-report: generate-graphs
	@echo "üìù Criando relat√≥rio LaTeX..."
	@$(VENV_DIR)/bin/python scripts/create_latex_report.py
	@cp $(RESULTS_DIR)/simulation_report.tex $(REPORT_DIR)/
	@cp -r $(RESULTS_DIR)/*.png $(REPORT_DIR)/ 2>/dev/null || true
	@echo "üìÑ Relat√≥rio criado: $(REPORT_DIR)/simulation_report.tex"

# Compila PDF do relat√≥rio (se pdflatex estiver dispon√≠vel)
compile-pdf: create-report
	@echo "üîß Tentando compilar PDF..."
	@if command -v pdflatex >/dev/null 2>&1; then \
		cd $(REPORT_DIR) && pdflatex simulation_report.tex; \
		echo "üìÑ PDF gerado: $(REPORT_DIR)/simulation_report.pdf"; \
	else \
		echo "‚ö†Ô∏è pdflatex n√£o encontrado. Instale TeXLive para gerar PDF."; \
	fi

# Limpeza
clean:
	@echo "üßπ Limpando arquivos tempor√°rios..."
	@rm -rf $(RESULTS_DIR)
	@rm -rf __pycache__
	@rm -rf *.pyc
	@find . -name "*.log" -delete
	@echo "‚úÖ Limpeza conclu√≠da"

# Limpeza completa (incluindo venv)
clean-all: clean
	@echo "üßπ Limpeza completa..."
	@rm -rf $(VENV_DIR)
	@echo "‚úÖ Limpeza completa conclu√≠da"

# Execu√ß√£o r√°pida (apenas testes essenciais)
quick: setup install run-enhanced run-balanced collect-results
	@echo "‚ö° Execu√ß√£o r√°pida conclu√≠da!"

# Ajuda
help:
	@echo "üÜò Comandos dispon√≠veis:"
	@echo "  make all          - Executa simula√ß√£o completa"
	@echo "  make quick        - Execu√ß√£o r√°pida (essencial)"
	@echo "  make setup        - Configura ambiente"
	@echo "  make install      - Instala depend√™ncias"
	@echo "  make run-all      - Executa todas as simula√ß√µes"
	@echo "  make run-enhanced - Executa simula√ß√£o principal"
	@echo "  make run-demo     - Executa demo"
	@echo "  make run-balanced - Executa teste balanceado"
	@echo "  make run-spade    - Executa simula√ß√£o SPADE"
	@echo "  make collect-results - Coleta resultados"
	@echo "  make generate-graphs - Gera gr√°ficos"
	@echo "  make create-report   - Cria relat√≥rio LaTeX"
	@echo "  make compile-pdf     - Compila PDF (requer pdflatex)"
	@echo "  make clean        - Remove arquivos tempor√°rios"
	@echo "  make clean-all    - Limpeza completa"
	@echo "  make help         - Mostra esta ajuda"

# Target padr√£o
.DEFAULT_GOAL := help
